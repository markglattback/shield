{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.e61aa529b773dec5487c.hot-update.js","sources":["webpack:///./lib/withApollo.js"],"sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\n// import { withClientState } from 'apollo-link-state';\r\nimport { ApolloLink, Observable } from 'apollo-link';\r\nimport withApollo from 'next-with-apollo';\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst request = async (operation) => {\r\n  // set custom headers in here\r\n  console.log(operation);\r\n};\r\n\r\n\r\nconst requestLink = new ApolloLink((operation, forward) => new Observable((observer) => {\r\n  let handle;\r\n  Promise.resolve(operation)\r\n    .then(oper => request(oper))\r\n    .then(() => {\r\n      handle = forward(operation).subscribe({\r\n        next: observer.next.bind(observer),\r\n        error: observer.error.bind(observer),\r\n        complete: observer.complete.bind(observer),\r\n      });\r\n    })\r\n    .catch(observer.error.bind(observer));\r\n\r\n  return () => {\r\n    if (handle) handle.unsubscribe();\r\n  };\r\n}));\r\n\r\nfunction createClient({ ctx, headers, initialState }) {\r\n  return new ApolloClient({\r\n    link: ApolloLink.from([\r\n      onError(({ operation, response, graphQLErrors, networkError }) => {\r\n        if (graphQLErrors) {\r\n          const [ error ] = graphQLErrors;\r\n          // todo\r\n        }\r\n        if (networkError) {\r\n          console.log(networkError);\r\n          // todo\r\n        }\r\n      }),\r\n      requestLink,\r\n      new HttpLink({\r\n        uri: 'http://localhost:1989/graphql',\r\n        credentials: 'include',\r\n      }),\r\n    ]),\r\n    cache,\r\n    ssrMode: true,\r\n  });\r\n}\r\n\r\ncache.writeData({\r\n  data: {\r\n    systemMessage: '',\r\n    __typename: 'SystemMessage',\r\n  }\r\n})\r\n\r\nexport default withApollo(createClient);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAhBA;AACA;AAiBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAOA;;;;A","sourceRoot":""}