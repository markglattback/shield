{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.5ab6bae95e788f5f698d.hot-update.js","sources":["webpack:///./lib/init-apollo.js"],"sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nlet apolloClient = null;\r\n\r\nfunction create(initialState, { cookies }) {\r\n  // initialState is the cache data returned from Apollo's getDataFromTree\r\n  const isBrowser = typeof window !== 'undefined';\r\n  const cache = new InMemoryCache().restore(initialState || {});\r\n\r\n  return new ApolloClient({\r\n    connectToDevTools: isBrowser,\r\n    ssrMode: !isBrowser,\r\n    link: ApolloLink.from([\r\n      onError(({ operation, response, graphQLErrors, networkError }) => {\r\n        if (graphQLErrors) {\r\n          // logout client on unauthenticated\r\n          graphQLErrors.forEach((error) => {\r\n            if (error.extensions.code === 'UNAUTHENTICATED') {\r\n              // todo\r\n            }\r\n          });\r\n        }\r\n        if (networkError) {\r\n          // todo\r\n        }\r\n      }),\r\n      new ApolloLink((operation, forward) => {\r\n        operation.setContext(({ headers }) => {\r\n          if (!cookies) return { headers };\r\n\r\n          return {\r\n            headers: {\r\n              ...headers,\r\n              Cookie: cookies,\r\n            },\r\n          };\r\n        });\r\n\r\n        return forward(operation);\r\n      }),\r\n      new HttpLink({\r\n        uri: 'http://localhost:1989/graphql',\r\n        credentials: 'include',\r\n        fetch: !isBrowser && fetch,\r\n      }),\r\n    ]),\r\n    cache,\r\n    defaultOptions: {\r\n      query: {\r\n        fetchPolicy: 'cache-and-network',\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState, options = {}) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections\r\n  if (typeof window === 'undefined') {\r\n    return create(initialState, options);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState, options);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAFA;AADA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AADA;AADA;AAtCA;AA4CA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}