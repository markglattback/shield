{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error'; // import { withClientState } from 'apollo-link-state';\n\nimport { ApolloLink, Observable } from 'apollo-link';\nimport withApollo from 'next-with-apollo';\nvar cache = new InMemoryCache();\n\nvar request =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(operation) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // set custom headers in here\n            console.log(operation);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function request(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar requestLink = new ApolloLink(function (operation, forward) {\n  return new Observable(function (observer) {\n    var handle;\n\n    _Promise.resolve(operation).then(function (oper) {\n      return request(oper);\n    }).then(function () {\n      handle = forward(operation).subscribe({\n        next: observer.next.bind(observer),\n        error: observer.error.bind(observer),\n        complete: observer.complete.bind(observer)\n      });\n    })[\"catch\"](observer.error.bind(observer));\n\n    return function () {\n      if (handle) handle.unsubscribe();\n    };\n  });\n});\n\nfunction createClient(_ref2) {\n  var ctx = _ref2.ctx,\n      headers = _ref2.headers,\n      initialState = _ref2.initialState;\n  return new ApolloClient({\n    link: ApolloLink.from([onError(function (_ref3) {\n      var operation = _ref3.operation,\n          response = _ref3.response,\n          graphQLErrors = _ref3.graphQLErrors,\n          networkError = _ref3.networkError;\n\n      if (graphQLErrors) {\n        var _graphQLErrors = _slicedToArray(graphQLErrors, 1),\n            error = _graphQLErrors[0]; // todo\n\n      }\n\n      if (networkError) {\n        console.log(networkError); // todo\n      }\n    }), requestLink, new HttpLink({\n      uri: 'http://localhost:1989/graphql',\n      credentials: 'include'\n    })]),\n    cache: cache,\n    ssrMode: true\n  });\n}\n\ncache.writeData({\n  data: {\n    systemMessage: ''\n  }\n});\nexport default withApollo(createClient);","map":{"version":3,"sources":["C:\\apps\\shield\\frontend\\lib\\withApollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","withApollo","cache","request","operation","console","log","requestLink","forward","observer","handle","resolve","then","oper","subscribe","next","bind","error","complete","unsubscribe","createClient","ctx","headers","initialState","link","from","response","graphQLErrors","networkError","uri","credentials","ssrMode","writeData","data","systemMessage"],"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB,C,CACA;;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,aAAvC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,IAAMC,KAAK,GAAG,IAAIN,aAAJ,EAAd;;AAEA,IAAMO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AACd;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb;;AAMA,IAAMI,WAAW,GAAG,IAAIR,UAAJ,CAAe,UAACK,SAAD,EAAYI,OAAZ;AAAA,SAAwB,IAAIR,UAAJ,CAAe,UAACS,QAAD,EAAc;AACtF,QAAIC,MAAJ;;AACA,aAAQC,OAAR,CAAgBP,SAAhB,EACGQ,IADH,CACQ,UAAAC,IAAI;AAAA,aAAIV,OAAO,CAACU,IAAD,CAAX;AAAA,KADZ,EAEGD,IAFH,CAEQ,YAAM;AACVF,MAAAA,MAAM,GAAGF,OAAO,CAACJ,SAAD,CAAP,CAAmBU,SAAnB,CAA6B;AACpCC,QAAAA,IAAI,EAAEN,QAAQ,CAACM,IAAT,CAAcC,IAAd,CAAmBP,QAAnB,CAD8B;AAEpCQ,QAAAA,KAAK,EAAER,QAAQ,CAACQ,KAAT,CAAeD,IAAf,CAAoBP,QAApB,CAF6B;AAGpCS,QAAAA,QAAQ,EAAET,QAAQ,CAACS,QAAT,CAAkBF,IAAlB,CAAuBP,QAAvB;AAH0B,OAA7B,CAAT;AAKD,KARH,WASSA,QAAQ,CAACQ,KAAT,CAAeD,IAAf,CAAoBP,QAApB,CATT;;AAWA,WAAO,YAAM;AACX,UAAIC,MAAJ,EAAYA,MAAM,CAACS,WAAP;AACb,KAFD;AAGD,GAhB0D,CAAxB;AAAA,CAAf,CAApB;;AAkBA,SAASC,YAAT,QAAsD;AAAA,MAA9BC,GAA8B,SAA9BA,GAA8B;AAAA,MAAzBC,OAAyB,SAAzBA,OAAyB;AAAA,MAAhBC,YAAgB,SAAhBA,YAAgB;AACpD,SAAO,IAAI5B,YAAJ,CAAiB;AACtB6B,IAAAA,IAAI,EAAEzB,UAAU,CAAC0B,IAAX,CAAgB,CACpB3B,OAAO,CAAC,iBAA0D;AAAA,UAAvDM,SAAuD,SAAvDA,SAAuD;AAAA,UAA5CsB,QAA4C,SAA5CA,QAA4C;AAAA,UAAlCC,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;;AAChE,UAAID,aAAJ,EAAmB;AAAA,4CACCA,aADD;AAAA,YACTV,KADS,sBAEjB;;AACD;;AACD,UAAIW,YAAJ,EAAkB;AAChBvB,QAAAA,OAAO,CAACC,GAAR,CAAYsB,YAAZ,EADgB,CAEhB;AACD;AACF,KATM,CADa,EAWpBrB,WAXoB,EAYpB,IAAIV,QAAJ,CAAa;AACXgC,MAAAA,GAAG,EAAE,+BADM;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb,CAZoB,CAAhB,CADgB;AAkBtB5B,IAAAA,KAAK,EAALA,KAlBsB;AAmBtB6B,IAAAA,OAAO,EAAE;AAnBa,GAAjB,CAAP;AAqBD;;AAED7B,KAAK,CAAC8B,SAAN,CAAgB;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,aAAa,EAAE;AADX;AADQ,CAAhB;AAMA,eAAejC,UAAU,CAACmB,YAAD,CAAzB","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\n// import { withClientState } from 'apollo-link-state';\r\nimport { ApolloLink, Observable } from 'apollo-link';\r\nimport withApollo from 'next-with-apollo';\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst request = async (operation) => {\r\n  // set custom headers in here\r\n  console.log(operation);\r\n};\r\n\r\n\r\nconst requestLink = new ApolloLink((operation, forward) => new Observable((observer) => {\r\n  let handle;\r\n  Promise.resolve(operation)\r\n    .then(oper => request(oper))\r\n    .then(() => {\r\n      handle = forward(operation).subscribe({\r\n        next: observer.next.bind(observer),\r\n        error: observer.error.bind(observer),\r\n        complete: observer.complete.bind(observer),\r\n      });\r\n    })\r\n    .catch(observer.error.bind(observer));\r\n\r\n  return () => {\r\n    if (handle) handle.unsubscribe();\r\n  };\r\n}));\r\n\r\nfunction createClient({ ctx, headers, initialState }) {\r\n  return new ApolloClient({\r\n    link: ApolloLink.from([\r\n      onError(({ operation, response, graphQLErrors, networkError }) => {\r\n        if (graphQLErrors) {\r\n          const [ error ] = graphQLErrors\r\n          // todo\r\n        }\r\n        if (networkError) {\r\n          console.log(networkError);\r\n          // todo\r\n        }\r\n      }),\r\n      requestLink,\r\n      new HttpLink({\r\n        uri: 'http://localhost:1989/graphql',\r\n        credentials: 'include',\r\n      }),\r\n    ]),\r\n    cache,\r\n    ssrMode: true,\r\n  });\r\n}\r\n\r\ncache.writeData({ \r\n  data: {\r\n    systemMessage: '',\r\n  },\r\n});\r\n\r\nexport default withApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}