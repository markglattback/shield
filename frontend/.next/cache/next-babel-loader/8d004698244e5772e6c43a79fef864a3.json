{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n\nfunction create(initialState, _ref) {\n  var cookies = _ref.cookies;\n  // initialState is the cache data returned from Apollo's getDataFromTree\n  var isBrowser = typeof window !== 'undefined';\n  var cache = new InMemoryCache().restore(initialState || {});\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: ApolloLink.from([onError(function (_ref2) {\n      var operation = _ref2.operation,\n          response = _ref2.response,\n          graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n\n      if (graphQLErrors) {\n        // logout client on unauthenticated\n        graphQLErrors.forEach(function (error) {\n          if (error.extensions.code === 'UNAUTHENTICATED') {// if (isBrowser) console.log(window.location.);\n          }\n        });\n      }\n\n      if (networkError) {// todo\n      }\n    }), new ApolloLink(function (operation, forward) {\n      operation.setContext(function (_ref3) {\n        var headers = _ref3.headers;\n        if (!cookies) return {\n          headers: headers\n        };\n        return {\n          headers: _objectSpread({}, headers, {\n            Cookie: cookies\n          })\n        };\n      });\n      return forward(operation);\n    }), new HttpLink({\n      uri: 'http://localhost:1989/graphql',\n      credentials: 'include',\n      fetch: !isBrowser && fetch\n    })]),\n    cache: cache,\n    defaultOptions: {\n      query: {\n        fetchPolicy: 'cache-and-network'\n      }\n    }\n  });\n}\n\nexport default function initApollo(initialState) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections\n  if (typeof window === 'undefined') {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["C:\\apps\\shield\\frontend\\lib\\init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","fetch","apolloClient","create","initialState","cookies","isBrowser","window","cache","restore","connectToDevTools","ssrMode","link","from","operation","response","graphQLErrors","networkError","forEach","error","extensions","code","forward","setContext","headers","Cookie","uri","credentials","defaultOptions","query","fetchPolicy","initApollo","options"],"mappings":";AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,SAASC,MAAT,CAAgBC,YAAhB,QAA2C;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACzC;AACA,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,MAAMC,KAAK,GAAG,IAAIX,aAAJ,GAAoBY,OAApB,CAA4BL,YAAY,IAAI,EAA5C,CAAd;AAEA,SAAO,IAAIR,YAAJ,CAAiB;AACtBc,IAAAA,iBAAiB,EAAEJ,SADG;AAEtBK,IAAAA,OAAO,EAAE,CAACL,SAFY;AAGtBM,IAAAA,IAAI,EAAEZ,UAAU,CAACa,IAAX,CAAgB,CACpBd,OAAO,CAAC,iBAA0D;AAAA,UAAvDe,SAAuD,SAAvDA,SAAuD;AAAA,UAA5CC,QAA4C,SAA5CA,QAA4C;AAAA,UAAlCC,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;;AAChE,UAAID,aAAJ,EAAmB;AACjB;AACAA,QAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC/B,cAAIA,KAAK,CAACC,UAAN,CAAiBC,IAAjB,KAA0B,iBAA9B,EAAiD,CAC/C;AACD;AACF,SAJD;AAKD;;AACD,UAAIJ,YAAJ,EAAkB,CAChB;AACD;AACF,KAZM,CADa,EAcpB,IAAIjB,UAAJ,CAAe,UAACc,SAAD,EAAYQ,OAAZ,EAAwB;AACrCR,MAAAA,SAAS,CAACS,UAAV,CAAqB,iBAAiB;AAAA,YAAdC,OAAc,SAAdA,OAAc;AACpC,YAAI,CAACnB,OAAL,EAAc,OAAO;AAAEmB,UAAAA,OAAO,EAAPA;AAAF,SAAP;AAEd,eAAO;AACLA,UAAAA,OAAO,oBACFA,OADE;AAELC,YAAAA,MAAM,EAAEpB;AAFH;AADF,SAAP;AAMD,OATD;AAWA,aAAOiB,OAAO,CAACR,SAAD,CAAd;AACD,KAbD,CAdoB,EA4BpB,IAAIhB,QAAJ,CAAa;AACX4B,MAAAA,GAAG,EAAE,+BADM;AAEXC,MAAAA,WAAW,EAAE,SAFF;AAGX1B,MAAAA,KAAK,EAAE,CAACK,SAAD,IAAcL;AAHV,KAAb,CA5BoB,CAAhB,CAHgB;AAqCtBO,IAAAA,KAAK,EAALA,KArCsB;AAsCtBoB,IAAAA,cAAc,EAAE;AACdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAE;AADR;AADO;AAtCM,GAAjB,CAAP;AA4CD;;AAED,eAAe,SAASC,UAAT,CAAoB3B,YAApB,EAAgD;AAAA,MAAd4B,OAAc,uEAAJ,EAAI;;AAC7D;AACA;AACA,MAAI,OAAOzB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOJ,MAAM,CAACC,YAAD,EAAe4B,OAAf,CAAb;AACD,GAL4D,CAO7D;;;AACA,MAAI,CAAC9B,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,EAAe4B,OAAf,CAArB;AACD;;AAED,SAAO9B,YAAP;AACD","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nlet apolloClient = null;\r\n\r\nfunction create(initialState, { cookies }) {\r\n  // initialState is the cache data returned from Apollo's getDataFromTree\r\n  const isBrowser = typeof window !== 'undefined';\r\n  const cache = new InMemoryCache().restore(initialState || {});\r\n\r\n  return new ApolloClient({\r\n    connectToDevTools: isBrowser,\r\n    ssrMode: !isBrowser,\r\n    link: ApolloLink.from([\r\n      onError(({ operation, response, graphQLErrors, networkError }) => {\r\n        if (graphQLErrors) {\r\n          // logout client on unauthenticated\r\n          graphQLErrors.forEach((error) => {\r\n            if (error.extensions.code === 'UNAUTHENTICATED') {\r\n              // if (isBrowser) console.log(window.location.);\r\n            }\r\n          });\r\n        }\r\n        if (networkError) {\r\n          // todo\r\n        }\r\n      }),\r\n      new ApolloLink((operation, forward) => {\r\n        operation.setContext(({ headers }) => {\r\n          if (!cookies) return { headers };\r\n\r\n          return {\r\n            headers: {\r\n              ...headers,\r\n              Cookie: cookies,\r\n            },\r\n          };\r\n        });\r\n\r\n        return forward(operation);\r\n      }),\r\n      new HttpLink({\r\n        uri: 'http://localhost:1989/graphql',\r\n        credentials: 'include',\r\n        fetch: !isBrowser && fetch,\r\n      }),\r\n    ]),\r\n    cache,\r\n    defaultOptions: {\r\n      query: {\r\n        fetchPolicy: 'cache-and-network',\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState, options = {}) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections\r\n  if (typeof window === 'undefined') {\r\n    return create(initialState, options);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState, options);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}