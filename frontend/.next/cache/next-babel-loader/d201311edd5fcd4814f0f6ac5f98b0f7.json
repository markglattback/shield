{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\apps\\\\shield\\\\frontend\\\\lib\\\\with-apollo-client.js\";\nimport React from 'react';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      // called after getInitalProps\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n      }\n    }], [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, context, req, cookies, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router, context = ctx.ctx;\n                  req = context.req; // We need to pass cookies manually to node-fetch during SSR\n\n                  if (req) {\n                    cookies = req.headers.cookie;\n                  } // Get initial props for _app.js\n\n\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  // Run all GraphQL queries in the component tree\n                  // and extract data to populate apollo cache\n                  apollo = initApollo({}, {\n                    cookies: cookies\n                  }); // SSR only\n\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  _context.prev = 10;\n                  _context.next = 13;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 39\n                    },\n                    __self: this\n                  })));\n\n                case 13:\n                  _context.next = 18;\n                  break;\n\n                case 15:\n                  _context.prev = 15;\n                  _context.t0 = _context[\"catch\"](10);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop or in onError link\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 18:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 19:\n                  // Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 21:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[10, 15]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["C:\\apps\\shield\\frontend\\lib\\with-apollo-client.js"],"names":["React","Head","getDataFromTree","initApollo","App","props","apolloClient","apolloState","ctx","Component","router","context","req","cookies","headers","cookie","appProps","getInitialProps","apollo","window","console","error","rewind","cache","extract"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,gBAAe,UAAAC,GAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGhB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB;AACA,kFAAMA,KAAN;AACA,YAAKC,YAAL,GAAoBH,UAAU,CAACE,KAAK,CAACE,WAAP,CAA9B;AAHiB;AAIlB;;AAPe;AAAA;AAAA,+BA4DP;AACP,eAAO,oBAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AA9De;AAAA;AAAA;AAAA;AAAA;AAAA,kDASaE,GATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAUNC,kBAAAA,SAVM,GAU8BD,GAV9B,CAUNC,SAVM,EAUKC,MAVL,GAU8BF,GAV9B,CAUKE,MAVL,EAUkBC,OAVlB,GAU8BH,GAV9B,CAUaA,GAVb;AAWNI,kBAAAA,GAXM,GAWED,OAXF,CAWNC,GAXM,EAad;;AAEA,sBAAIA,GAAJ,EAAS;AACPC,oBAAAA,OAAO,GAAGD,GAAG,CAACE,OAAJ,CAAYC,MAAtB;AACD,mBAjBa,CAmBd;;;AACIC,kBAAAA,QApBU,GAoBC,EApBD;;AAAA,uBAqBVZ,GAAG,CAACa,eArBM;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAsBKb,GAAG,CAACa,eAAJ,CAAoBT,GAApB,CAtBL;;AAAA;AAsBZQ,kBAAAA,QAtBY;;AAAA;AAyBd;AACA;AACME,kBAAAA,MA3BQ,GA2BCf,UAAU,CAAC,EAAD,EAAK;AAAEU,oBAAAA,OAAO,EAAPA;AAAF,mBAAL,CA3BX,EA4Bd;;AA5Bc,wBA6BV,OAAOM,MAAP,KAAkB,WA7BR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAgCJjB,eAAe,CACnB,oBAAC,GAAD,eACMc,QADN;AAEE,oBAAA,SAAS,EAAEP,SAFb;AAGE,oBAAA,MAAM,EAAEC,MAHV;AAIE,oBAAA,YAAY,EAAEQ,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CAhCX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyCV;AACA;AACAE,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AA3CU;AA8CZ;AACA;AACApB,kBAAAA,IAAI,CAACqB,MAAL;;AAhDY;AAmDd;AACMf,kBAAAA,WApDQ,GAoDMW,MAAM,CAACK,KAAP,CAAaC,OAAb,EApDN;AAAA,qEAuDTR,QAvDS;AAwDZT,oBAAAA,WAAW,EAAXA;AAxDY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,IAAyBP,KAAK,CAACS,SAA/B,0CACK,iBADL;AAAA,CAAlB","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport { getDataFromTree } from 'react-apollo';\r\nimport initApollo from './init-apollo';\r\n\r\nexport default App => class Apollo extends React.Component {\r\n  static displayName = 'withApollo(App)';\r\n    \r\n  constructor(props) {\r\n    // called after getInitalProps\r\n    super(props);\r\n    this.apolloClient = initApollo(props.apolloState);\r\n  }\r\n\r\n  static async getInitialProps(ctx) {\r\n    const { Component, router, ctx: context } = ctx;\r\n    const { req } = context;\r\n    \r\n    // We need to pass cookies manually to node-fetch during SSR\r\n    let cookies;\r\n    if (req) {\r\n      cookies = req.headers.cookie;\r\n    }\r\n\r\n    // Get initial props for _app.js\r\n    let appProps = {};\r\n    if (App.getInitialProps) {\r\n      appProps = await App.getInitialProps(ctx);\r\n    }\r\n    \r\n    // Run all GraphQL queries in the component tree\r\n    // and extract data to populate apollo cache\r\n    const apollo = initApollo({}, { cookies });\r\n    // SSR only\r\n    if (typeof window === 'undefined') {\r\n      try {\r\n        // Run all GraphQL queries\r\n        await getDataFromTree(\r\n          <App\r\n            {...appProps}\r\n            Component={Component}\r\n            router={router}\r\n            apolloClient={apollo}\r\n          />,\r\n        );\r\n      } catch (error) {\r\n        // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n        // Handle them in components via the data.error prop or in onError link\r\n        console.error('Error while running `getDataFromTree`', error);\r\n      }\r\n\r\n      // getDataFromTree does not call componentWillUnmount\r\n      // head side effect therefore need to be cleared manually\r\n      Head.rewind();\r\n    }\r\n\r\n    // Extract query data from the Apollo store\r\n    const apolloState = apollo.cache.extract();\r\n\r\n    return {\r\n      ...appProps,\r\n      apolloState,\r\n    };\r\n  }\r\n  \r\n  render() {\r\n    return <App {...this.props} apolloClient={this.apolloClient} />;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}