{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n\nfunction create(initialState) {\n  // initialState is the cache data returned from Apollo's getDataFromTree\n  var isBrowser = typeof window !== 'undefined';\n  var cache = new InMemoryCache().restore(initialState || {});\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: ApolloLink.from([onError(function (_ref) {\n      var response = _ref.response,\n          graphQLErrors = _ref.graphQLErrors,\n          networkError = _ref.networkError;\n\n      if (graphQLErrors) {\n        console.log(response); // logout client on unauthenticated\n      }\n\n      if (networkError) {\n        console.log(networkError); // todo\n      }\n    }), new HttpLink({\n      uri: 'http://localhost:1989/graphql',\n      credentials: 'include',\n      fetch: !isBrowser && fetch\n    })]),\n    cache: cache\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections\n  if (typeof window === 'undefined') {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["C:\\apps\\shield\\frontend\\lib\\init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","fetch","apolloClient","create","initialState","isBrowser","window","cache","restore","connectToDevTools","ssrMode","link","from","response","graphQLErrors","networkError","console","log","uri","credentials","initApollo"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,SAASC,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B;AACA,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,MAAMC,KAAK,GAAG,IAAIV,aAAJ,GAAoBW,OAApB,CAA4BJ,YAAY,IAAI,EAA5C,CAAd;AAEA,SAAO,IAAIR,YAAJ,CAAiB;AACtBa,IAAAA,iBAAiB,EAAEJ,SADG;AAEtBK,IAAAA,OAAO,EAAE,CAACL,SAFY;AAGtBM,IAAAA,IAAI,EAAEX,UAAU,CAACY,IAAX,CAAgB,CACpBb,OAAO,CAAC,gBAA+C;AAAA,UAA5Cc,QAA4C,QAA5CA,QAA4C;AAAA,UAAlCC,aAAkC,QAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;;AACrD,UAAID,aAAJ,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EADiB,CAEjB;AACD;;AACD,UAAIE,YAAJ,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EADgB,CAEhB;AACD;AACF,KATM,CADa,EAWpB,IAAIjB,QAAJ,CAAa;AACXoB,MAAAA,GAAG,EAAE,+BADM;AAEXC,MAAAA,WAAW,EAAE,SAFF;AAGXlB,MAAAA,KAAK,EAAE,CAACI,SAAD,IAAcJ;AAHV,KAAb,CAXoB,CAAhB,CAHgB;AAoBtBM,IAAAA,KAAK,EAALA;AApBsB,GAAjB,CAAP;AAsBD;;AAED,eAAe,SAASa,UAAT,CAAoBhB,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOH,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOF,YAAP;AACD","sourcesContent":["import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nlet apolloClient = null;\r\n\r\nfunction create(initialState) {\r\n  // initialState is the cache data returned from Apollo's getDataFromTree\r\n  const isBrowser = typeof window !== 'undefined';\r\n  const cache = new InMemoryCache().restore(initialState || {});\r\n\r\n  return new ApolloClient({\r\n    connectToDevTools: isBrowser,\r\n    ssrMode: !isBrowser,\r\n    link: ApolloLink.from([\r\n      onError(({ response, graphQLErrors, networkError }) => {\r\n        if (graphQLErrors) {\r\n          console.log(response);\r\n          // logout client on unauthenticated\r\n        }\r\n        if (networkError) {\r\n          console.log(networkError);\r\n          // todo\r\n        }\r\n      }),\r\n      new HttpLink({\r\n        uri: 'http://localhost:1989/graphql',\r\n        credentials: 'include',\r\n        fetch: !isBrowser && fetch,\r\n      }),\r\n    ]),\r\n    cache,\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections\r\n  if (typeof window === 'undefined') {\r\n    return create(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}